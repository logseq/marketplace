;; To use this: Install babashka - https://github.com/babashka/babashka#installation
{:tasks
 {:requires ([cheshire.core :as json]
             [clojure.pprint :as pprint])
  :init
  (do
    (def default-fields [:id :author :repo])

    (defn- plugins []
      (-> "plugins.json" slurp (json/parse-string keyword) :packages))

    (defn print-table [rows]
      (pprint/print-table rows)
      (println "Total:" (count rows) "rows"))
    )

  plugins
  {:doc "List all plugins"
   :task
   (->> (plugins)
        (mapv (fn [p] (select-keys p default-fields)))
        print-table)}

  non-theme-plugins
  {:doc "List non theme plugins"
   :task
   (->> (plugins)
        (remove :theme)
        (mapv (fn [p] (select-keys p default-fields)))
        print-table)}

  theme-plugins
  {:doc "List theme plugins"
   :task
   (->> (plugins)
        (filter :theme)
        (mapv (fn [p] (select-keys p default-fields)))
        print-table)}

  author-stats
  {:doc "List stats by author"
   :task
   (->> (plugins)
        (group-by :author)
        (sort-by (comp count second) >)
        (map (fn [[k v]] {:author k :plugin-count (count v)}))
        print-table)}

  plugin-stats
  {:doc "List stats by plugin"
   :task
   (let [stats-map (-> "stats.json"
                       slurp
                       (json/parse-string keyword))
         plugin->author (into {} (map (juxt :id :author) (plugins)))
         stats (->> stats-map
                    (map (fn [[k v]]
                           {:plugin k
                            :author (plugin->author (name k))
                            :releases (count (:releases v))
                            :downloads (apply + (map (fn [v] (nth v 2)) (:releases v)))
                            :stargazers (:stargazers_count v)}))
                    (sort-by :downloads >))]
     (print-table stats)
     (println "Total Downloads:" (apply + (map :downloads stats))))}

  validate-plugins
  {:doc "Validate plugins.json"
   :extra-deps {org.babashka/spec.alpha
                {:git/url "https://github.com/babashka/spec.alpha"
                 :sha "1a841c4cc1d4f6dab7505a98ed2d532dd9d56b78"}}
   :requires ([clojure.spec.alpha :as s])
   :task
   (let [plugins' (plugins)]
     ;; Define specs for valid plugins
     (s/def :bb/title string?)
     (s/def :bb/description string?)
     (s/def :bb/author string?)
     (s/def :bb/repo string?)
     (s/def :bb/plugin (s/keys :req-un [:bb/title :bb/description
                                        :bb/author :bb/repo]))
     (s/def :bb/plugins (s/coll-of :bb/plugin))

     (if-let [errors (s/explain-data :bb/plugins plugins')]
       (do
         (pprint/pprint {:errors (:clojure.spec.alpha/problems errors)
                         :message "Invalid plugins found"})
         (System/exit 1))
       (println "All plugins are valid!")))}}}
